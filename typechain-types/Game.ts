/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Game {
  export type SecretMetadataStruct = {
    creator: AddressLike;
    name: string;
    longevity: BigNumberish;
  };

  export type SecretMetadataStructOutput = [
    creator: string,
    name: string,
    longevity: bigint
  ] & { creator: string; name: string; longevity: bigint };
}

export interface GameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_lastSeen"
      | "_metas"
      | "createSecret"
      | "getLastSeen"
      | "getMetas"
      | "refreshSecrets"
      | "revealSecret"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SecretCreated" | "SecretRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_lastSeen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_metas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSecret",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSeen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshSecrets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealSecret",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_lastSeen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_metas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSeen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMetas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshSecrets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealSecret",
    data: BytesLike
  ): Result;
}

export namespace SecretCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    name: string,
    index: BigNumberish
  ];
  export type OutputTuple = [creator: string, name: string, index: bigint];
  export interface OutputObject {
    creator: string;
    name: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretRevealedEvent {
  export type InputTuple = [
    creator: AddressLike,
    name: string,
    index: BigNumberish
  ];
  export type OutputTuple = [creator: string, name: string, index: bigint];
  export interface OutputObject {
    creator: string;
    name: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Game extends BaseContract {
  connect(runner?: ContractRunner | null): Game;
  waitForDeployment(): Promise<this>;

  interface: GameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _lastSeen: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  _metas: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        creator: string;
        name: string;
        longevity: bigint;
      }
    ],
    "view"
  >;

  createSecret: TypedContractMethod<
    [name: string, longevity: BigNumberish, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  getLastSeen: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getMetas: TypedContractMethod<
    [offset: BigNumberish, count: BigNumberish],
    [Game.SecretMetadataStructOutput[]],
    "view"
  >;

  refreshSecrets: TypedContractMethod<[], [void], "nonpayable">;

  revealSecret: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_lastSeen"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_metas"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        creator: string;
        name: string;
        longevity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createSecret"
  ): TypedContractMethod<
    [name: string, longevity: BigNumberish, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLastSeen"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMetas"
  ): TypedContractMethod<
    [offset: BigNumberish, count: BigNumberish],
    [Game.SecretMetadataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "refreshSecrets"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealSecret"
  ): TypedContractMethod<[index: BigNumberish], [string], "nonpayable">;

  getEvent(
    key: "SecretCreated"
  ): TypedContractEvent<
    SecretCreatedEvent.InputTuple,
    SecretCreatedEvent.OutputTuple,
    SecretCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SecretRevealed"
  ): TypedContractEvent<
    SecretRevealedEvent.InputTuple,
    SecretRevealedEvent.OutputTuple,
    SecretRevealedEvent.OutputObject
  >;

  filters: {
    "SecretCreated(address,string,uint256)": TypedContractEvent<
      SecretCreatedEvent.InputTuple,
      SecretCreatedEvent.OutputTuple,
      SecretCreatedEvent.OutputObject
    >;
    SecretCreated: TypedContractEvent<
      SecretCreatedEvent.InputTuple,
      SecretCreatedEvent.OutputTuple,
      SecretCreatedEvent.OutputObject
    >;

    "SecretRevealed(address,string,uint256)": TypedContractEvent<
      SecretRevealedEvent.InputTuple,
      SecretRevealedEvent.OutputTuple,
      SecretRevealedEvent.OutputObject
    >;
    SecretRevealed: TypedContractEvent<
      SecretRevealedEvent.InputTuple,
      SecretRevealedEvent.OutputTuple,
      SecretRevealedEvent.OutputObject
    >;
  };
}
