/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type DeckStruct = { indices: BytesLike };

export type DeckStructOutput = [indices: string] & { indices: string };

export type CardStruct = { suit: BigNumberish; rank: BigNumberish };

export type CardStructOutput = [suit: bigint, rank: bigint] & {
  suit: bigint;
  rank: bigint;
};

export interface PokerInterface extends Interface {
  getFunction(
    nameOrSignature: "createGame" | "gameToDeck" | "joinGame" | "nextCard"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameToDeck",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCard",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameToDeck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextCard", data: BytesLike): Result;
}

export interface Poker extends BaseContract {
  connect(runner?: ContractRunner | null): Poker;
  waitForDeployment(): Promise<this>;

  interface: PokerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createGame: TypedContractMethod<[], [void], "nonpayable">;

  gameToDeck: TypedContractMethod<
    [arg0: BigNumberish],
    [[DeckStructOutput, bigint] & { deck: DeckStructOutput; status: bigint }],
    "view"
  >;

  joinGame: TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;

  nextCard: TypedContractMethod<
    [gameId: BigNumberish],
    [CardStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameToDeck"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[DeckStructOutput, bigint] & { deck: DeckStructOutput; status: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextCard"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [CardStructOutput],
    "nonpayable"
  >;

  filters: {};
}
